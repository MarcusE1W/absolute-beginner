[{
  "name": "Creating a man page from markdown with pandoc",
  "description": "How to create a man page from a README.md file",
  "body": "How to create a man page from a README.md fileCreate a (unix) man page with Markdown using pandoc Man pages are application documentation that you find for almost every Unix/BSD/.. system. The format is text based on a markup language called Nroff. The principle concept is similar to Markdown, however the markup language nroff is a quite a bit less readable than markdown. Often variations of the nroff format are used like groff.Man pages are usually used in a terminal. So if you want to see the documentation for the command ls (list files) then you can key in:man ls  and you will see the available options for ls. This works for almost every programme, provided the programme author has written a page.This tutorial describes how to create man documentation pages from a markdown file using pandocUsing pandoc Pandoc is a text conversion tool that can convert text from markdown (or GitHub flavoured markdown ) to groff, a format that is used by the man command to show documentation.Installation of pandoc As pandoc is often not installed as a standard tool you first have to install it on your system.Installation for Archlinux pacman -S pandoc  Note: The above command installs quite a lot of dependencies. This is because it uses many shared files from Haskell (the programming language pandoc is build with). If you don&amp;rsquo;t have use for haskell otherwise there is a pandoc version on the AUR called XXXXXXX that does not have these dependencies.Create a man page with pandoc To create a man page from markdown we need a markdown file first. Here is an example to start with:# Header 1 Text for this `man** page ## Header 2 **bold text** The last line  Save this file as test.mdTo convert this file into a man page format use this command in the folder where test.md is saved:pandoc --standalone --from gfm --to man test.md --output test.1  The result is in the file test.1 and you can look at the new formal with less test.1. This format is not how the man page will be shown. To see how your new file looks like as a man page, use:man -l test.1  Let&amp;rsquo;s have a quick look at the options of the pandoc command and what they do:&amp;mdash; standalone: creates a complete man page, with complete structure&amp;mdash; from: the format to convert from. In this example gfm (GitHub flavoured markdown) has been specified, but you can also write markdown. for the small differences see the Pandoc documentation&amp;mdash; to: this is the format we want to concert the text to. In this case a man page&amp;mdash; output: the name of the output file. You could also leave this out, then the output goes to stdout.Structure of a man page Now that we can convert markdown to man pages it is worth mentioning that man pages often follow a certain structure. This makes it easier to find information. Of course before you don&amp;rsquo;t publish a man page you can also follow your own structure.There are many header sections, that can be used. Only NAME is seen as mandatory.NAME - The name and a short description of the programme SYNOPSIS - A short summary how to use the programme. e.g.: pandoc [options] [input-file]... DESCRIPTION - Description of the programme OPTIONS - description of options RETURN VALUE - return values of programme once it terminates EXAMPLES - always good to give some examples NOTES - Additional info SEE ALSO - reference to other related programmes AUTHOR - as in author of the programme HISTORY - of the programme if that is helpfulIt is absolutely fine to use only some of these headers like for example: NAME, SYNOPSIS, OPTIONS or any other combination. Remember that NAME is expected.Creating a man page from a GitHub README.md If you have a README.md in for example GitHub that explains your programme reasonably well you could use that file to create your man page. All you have to do is to add the above headers in the decisive places and the convert the updated file into a man page.pandoc --standalone --from gfm --to man README.md --output prog.1  You might have already noticed the unusual naming convention to end the man page with .1. The number classifies your man page and .1 stands for general.",
  "url": "https://absolute-beginner.netlify.com/post/man-markdown/"
},{
  "name": "About",
  "description": "This site is written by a beginner.I have noted my experiences while I tied to discover this and that in the IT world. Basically I have taken notes while learning and then put it into a bit of form.It is a all a bit here and there. Still, I hope that it might be helpful for other beginners to see my experiences and to have a kick-start to see how some things work.",
  "body": "This site is written by a beginner.I have noted my experiences while I tied to discover this and that in the IT world. Basically I have taken notes while learning and then put it into a bit of form.It is a all a bit here and there. Still, I hope that it might be helpful for other beginners to see my experiences and to have a kick-start to see how some things work. Of course there sometimes might be much better ways to do things that I have not discovered yet, but it is a start.Have fun , Marcus.",
  "url": "https://absolute-beginner.netlify.com/about/"
},{
  "name": "An Archlinux Desktop with LXQt and KWin for beginner",
  "description": "LXQt-KWin Description after front mattter",
  "body": "LXQt-KWin Description after front mattter#KWin and LXQt and VirtualBoxThis guide describes how to set up KWin and LXQt in Virtualbox using Arch Anywhere.The basic setup should work with any Computer, Virtualbox is just what I use.I have tried to install a relative light version with only a small memory footprint. There might be a more elegant solution though. If someone has an idea, please let me know.Setup VirtualBox  2 cores 2 GB ram (If you can spare that, 1GB also works, I hav not tested with less) Chipset: ICH9 3D acceleration on ? bi-directional copy and paste Display mem 64MB Shared folder (this is nice to have, later I will show how to set up the share)  Run Arch Anywhere Start Arch Anywhere. I have chosen the following setup. Feel free to change. no Wifi: network comes from the host-pc of VirtualBox. no swap partition (a swap file can be set up later if required, I don&amp;rsquo;t have one) Accept virtualbox-guest-additions  Additional apps  VLC: I have chosen that for video  Install  choose LXQT as desktop environment Reboot  After the first boot  login as root Create a user in the terminal &amp;gt; useradd -m -G users,wheel,audio archuser &amp;gt; &amp;gt;passwd archuser Update the system &amp;gt; sudo pacman -Syu Install Kwin &amp;gt; sudo pacman -S kwin Instal Kwin system setting dialog This enanbles the Kwin setting dialog. You can access the setting by clicking in the upper left menu of a window. There you see more actions and in that menu you see &amp;gt; sudo pacman -S kde-cli-tools Kwin-Gtk compability To change the theme of GTK apps in LXQt you need the LXDE appearance app. It has almost no dependencies, so it does not add much. &amp;gt; sudo pacman -S lxappearance In the lxappearance app you can chose the theme the gtk apps use. To see gtk apps with the Kwin Breeze themes add &amp;gt; sudo pacman -S breeze-gtk Fine tuning In my installation I had trouble with changing apps using Alt-Tab. Looking into the logs it turned out an app called kglobalaccel5 was not running. I have no idea where this app should be started but adding it to the LXQt autostart did it for me. &amp;gt; add to LXQt autostart: Menu -&amp;gt; Preferences -&amp;gt; LXQT settings -&amp;gt; Session Settings &amp;gt; In tab Autostart add kglobalaccel5 to LXQT Autostart  ( If you still have trouble check the Kwin settings in tab Task switcher. The flag current activity has to be set to on )Install additional software This is a selection of mostly Qt software that I found usefull.Browser I have chosen Qupzilla. Serves me well and is relativlely light. &amp;gt; pacman -S qupzilla###AUR repository To use packages from the AUR repository it is very helpful to use a package managemr for AUR. Pacman does not cover AUR packages. There are many options but I like trizen the best. It works like pacman with some additional functions for AUR packages.git clone https://aur.archlinux.org/trizen.git cd trizen makepkg -si  You can basically replace your use of pacman with trizen. Only for some special cases you can still use pacman.Graphical Editor: notepadqq Install notepadqq ( gui editor) from AUR repository &amp;gt; trizen -S howlYou don&amp;rsquo;t need to use sudo for trizen, you will be asked for the sudo passwd laterImage viewer: LX-Image Install lximage package from AUR repository &amp;gt; trizen -S lximage-qtPDF viewer: qPDFview  trizen -S qpdfview Disk space checker: QDirStat  trizen -S qdirstat Termina: LX Terminal Many LXQt editions use Qterminal. I like it but some keys are not accessible from programms in the console. So I use LX Termianl which has hardly any dependencies and is a bit smoother in my view. sudo pacman -S lxterminal Console Editor Micro Install Micro from the AUR repository: trizen -S micro-bin Alternative: Console Editor: Tilde Install Tilde (console editor) from AUR repository Tilde is a very user friendly console text editor that uses mostly the same keybindings as graphical apps like Ctrl-C for copy, Ctrl-V for paste and so on and comes with the menu (Alt-f for the file-menu for example)This package requires the packages fakeroot and pkg_config. Install these packages before you install tilde trizen -S tilde When you install Tilde several libraries will be installed during the process as dependencies. Most called ligt3*, etc.Download the arch-anywhere tool fetchmirrors  trizen -S fetchmirrors Use this tool to set up the right mirror servers for the Arch repository&amp;lsquo;fetchmirrors &amp;ndash;help` for helptrizen PGP Tip If you face a PGP authentication issue using trizen check this:Error message during trizen build is: ERROR: One or more PGP signatures could not be verified! :If you trust the package copy the public KEYID from the error message Then use these commands in the console to add the new key: gpg &amp;ndash;recv-key KEYID gpg &amp;ndash;lsign KEYID For details how that works read:Helpful hints, comments and questions are welcome",
  "url": "https://absolute-beginner.netlify.com/post/lxqt-kwin-virtualbox/"
}
]
