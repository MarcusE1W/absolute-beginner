[{
  "name": "Simple syntax highlighting for the Micro editor",
  "description": "How to write a simple file for syntax highlighting for any language for the Micro editor",
  "body": "How to write a simple file for syntax highlighting for any language for the Micro editorLanguage highlighting for beginner For a quick overview about syntax highlighting read this documentation for micro colorsThis text gives a simple introduction how to build a syntax highlighting file for micro.The examples of this text cut together gives a template for your own definitions.Before you start you might need a list of keywords for the language you want to define. One option is to find and copy a syntax file from an other editor.However it can also be helpful to just add a few keywords, edit the symbols, get the comments right and be ready.You can probably do many more clever things for your language syntax than is described in this text, but after reading this text you will be able to create a syntax file already.The syntax YAML file Micro syntax files are defined following the YAML configuration syntax. To create a new syntax file create a new file with the ending .yaml.To make your own syntax definition available to Micro you have to add the new syntax file in your home folder into ~/.config/micro/syntax.If you want to comment your syntax definition then you can use # to mark your comments.File header To start some general information are needed. Most importantly the language you want to describe gets defined with filetype:The filetype gets detected by the file ending described with detect:. For advanced users it is also possible to check the first line of the file to determine the filetype. Replace the values in the example with the relevant name and file ending for your new language.With the rules: keyword the actual language description gets started. Please mind that indentation is important. Everything after rules: has to be indented.e.g.filetype: Test-lang detect: filename: &amp;#34;\\\\.tst$&amp;#34; rules: Language keywords In this section you can describe the language keywords. The syntax looks a bit complex at first but you can mostly copy and paste it. There are three section: - -type : defines the types of the language - statement: defines the keywords of the language. YOu can cram all keywords in one statement or split them up on several statements. - special: can be used to highlight certain keywords of a language in a different color to the othe rkeywords. In Ocaml the function definition is worht a special highlight. In Elixir the do and end could be useful to highlight. It is down to you if you want to use it at all and for which keywords.For each of the above sections a string is defined with the relevant keywords: e.g. &amp;quot;\\\\b(?i:(int|float|bool|char|string|unit))\\\\b&amp;quot;. To define your own profile replace the part in the inner brackets () with your own keywords.e.g.- type: &amp;#34;\\\\b(?i:(int|float|bool|char|string|unit))\\\\b&amp;#34; - statement: &amp;#34;\\\\b(if|then|else)\\\\b&amp;#34; - statement: &amp;#34;\\\\b(for|and|or)\\\\b&amp;#34; - special: &amp;#34;\\\\b(let|rec|function|in)\\\\b&amp;#34; Operators, symbols, strings, comments Symbols and operators Symbols are used in many languages for different thing. That said most languages use similar symbols, so from the highlighting perspactive there is not so much difference. Below list of symbols gives you some common symbols and operators. These can be extended for you r language. There is no need to remove unused symbols. They just do not get used.e.g.- symbol: &amp;#34;(\\\\||@|!|:|::|_|~|=|\\\\\\\\|;|\\\\(\\\\)|||\\\\[|\\\\]|\\\\{|\\\\})&amp;#34; - symbol.operator: &amp;#34;(==|/=|&amp;amp;&amp;amp;|\\\\|\\\\||&amp;lt;|&amp;gt;|&amp;lt;=|&amp;gt;=)&amp;#34; Language constants Language constants means words like true that are no statements and cannot be changed. Depending on the language there can be other constants.e.g.- constant: &amp;#34;(Nothing|Just|LT|EQ|GT)&amp;#34; - constant.bool: &amp;#34;\\\\b(true|false)\\\\b&amp;#34; Strings Strings in most languages are within within quotation marks &amp;ldquo; &amp;rdquo; and characters are within singel quote &amp;lsquo; &amp;lsquo;. In this case you can just use the example below. The additional rule is to show additional controls in the string. e.g &amp;ldquo;Hallo /n&amp;rdquo; If your languages does not have that you can also write rules: []e.g.- constant.string: start: &amp;#34;\\&amp;#34;&amp;#34; end: &amp;#34;\\&amp;#34;&amp;#34; skip: &amp;#34;\\\\\\\\.&amp;#34; rules: - constant.specialChar: &amp;#34;\\\\\\\\.&amp;#34; - constant.string: start: &amp;#34;&amp;#39;&amp;#34; end: &amp;#34;&amp;#39;&amp;#34; skip: &amp;#34;\\\\\\\\.&amp;#34; rules: - constant.specialChar: &amp;#34;\\\\\\\\.&amp;#34; Comments Most languages have different symbols for single line and multi liine comments.e.g. for a multi line comment (&amp;hellip;)- comment: start: &amp;#34;\\\\(\\\\*&amp;#34; end: &amp;#34;\\\\*\\\\)&amp;#34; rules: - todo: &amp;#34;(TODO|XXX|FIXME):?&amp;#34; e.g. for a single line comment after # &amp;hellip;- comment: start: &amp;#34;#&amp;#34; end: &amp;#34;$&amp;#34; rules: [] To keep the overview in your syntax file you can and should add some comments. Single line comments in a .yaml file start with #. There are no multi line comments.e.g. for a single line comment with a comment# single line comment # ... - comment: start: &amp;#34;#&amp;#34; end: &amp;#34;$&amp;#34; rules: [] The full example with comments can be found here",
  "url": "https://absolute-beginner.netlify.com/post/micro-syntax1/"
},{
  "name": "A QEMU Virtual machine with a Windows host and a Linux guest",
  "description": "Run a (Arch)Linux system in a QEMU virtual machine on your Windows.",
  "body": "Run a (Arch)Linux system in a QEMU virtual machine on your Windows.Intro This is my first try to use QEMU to run Archlinux in a virtual machine.To use a virtual machine like QEMU can be quite useful for various reasons. - You cannot reinstall something else on you system. You need it as it is. So to install something new is not an option. - You sometimes just want to try a new operationg system without much risk that if anything goes wrong your current system takes dammage.If you have the choice between a system with 32 and 64 bit then choose the 64bit one. The newer 64bis processors have additional processor commands to support virtual machines. Sometimes these virtualization functions still have to be turned on in the BIOS.When talking about virtual machines you find the experessions hosd and guest a lot. - The host is the system that provides the virtual machine. In our case that is the Windows system. - The guest is the operating system that runs in the virtual machine. In our case Archlinux.Also to use QEMU you need to use the Windows command prompt. I haven&amp;rsquo;t used it for 15 years, but what you need is really basic so you should be all right.In this article I wan to set up a QEMU virtual machine with a Windows host and a Archlinux guest.When the virtual machine is used I am looking for this kind of configuration: - 2G of RAM memory - 8 GB hard drive (enough for a test, for a system you use you might want more ) - 2 Proccessors - 64MB Video Memory - support for my native display resolution of 1366x768 - Network access - shared drive between guest and host to exchange files - shared clipboard between guest and hostWifi setup is not for the guest Linux required even if you are actually using Wifi for you host computer. The virtual machine will make the network available to the guest as if it is a cable.Install QEMU on Windows You can install QUEMU from their website. The installation is quite straight foreward.After the installation all QEMU commands are in the QEMU folder. However, at least in my case the folder has not been added to the Windows search path. That means the commads will not be found if you just type them into the command prompt.So instead of typing a command you have to be in the QEMU folder and then type ./commandStarting the virtual machine Before you can start to install a new system you need a filesystem that the virtual machine can use and also a linux distribution ISO file.Create a virtual hard drive To be able to install linux it has to has access to a hard drive. For a virtual machine the hadr drive will be emualted by a file on Windows. There are two options for that file: - qcow2 : This format creadet a drive for linux that has exactly the size you specify on the linux guest side. However the Windows file that represents the hard drive will only grow to the size that is needed. So this option saves space but can also be bit slower. - raw : The file uses exactly the sixe on your host Windows drive as you have specified. This option can be a bit quicker.For this article we will use qcow2. You can create the drive whereever you want. I will put is in a sub-folder in QEMU named harddrive. The actually file is called archlinux.hdType this to create the harddrive:./qemu-img create -f qcow2 harddrive\\archlinux.hd 8G  Download a linux distribution to install First you need to download a linux ISO file somewhere. If you are not sure which one you want the distrowatch lists a lot of choices and ranks them by usage. Alsoo some description is given and for some linux distros you can also find some reviews.As the title said, for this article I will use Anarchy Linux. That is basically an installer helper to set up an Archlinux system without the hassel to do it all by hand. It&amp;rsquo;s all driven by menus. Previously Anarchy Linux was also called ArchAnywhere. It is probably helpful if you have set up Archlinux by hand once, but not mandatory. Also some knowledge about using the shell is helpful for Archlinux. It is not difficult though and comes quite natural.If in doubt maybe start with Manjaro. That is a Archlinux based distro that is tailored for ease of use. It is quite popular, has decent documentation and you find a lot of help and forums in in the web.Anarchy Linux can be found hereRun the virtual machine So now that all prepparations are done we can start the QEMU virtual machine. And istall the Linux in the virtual hard drive.qemu-system-x86_64 -m 2G -cdrom anarchy-cli-1.0.0-x86_64.iso -boot order=d -drive file=harddrive\\archlinux.hd   m: sets the memory available for the VM. Here 2GB, other options could be 512MB or whatever you want to give your Linux system. -boot order=d boot from cdrom rather than from hard drive.  To start and try your shiny new VM you can start it withqemu-system-x86_64 -m 2G -boot order=c -drive file=harddrive\\archlinux.hd  Aaand it turns out it is quite slow.Luckily some things can be done. 1. Currently we use only one processor, So that can be increased to two. 2. QEMU needs some Intel libraries to support the hardware acceleration for modern AMD64 (aka X86_64) processors. To use 2 processors add the parameter -smp 2 for 2 processors. That helps but not much.  The second option is to use the parameter -accel hax. There is a Intel package that needs to be present for this parameter to work. Instructions hereThe -accel hax switch does seem to speed up things. Only problem so far is that my Linux insatllation crashes.to be continued, hopefully",
  "url": "https://absolute-beginner.netlify.com/post/qemu-start/"
},{
  "name": "My system setup",
  "description": "These are my notes to remember how to set up my system.",
  "body": "These are my notes to remember how to set up my system.Set up programms This whole article is probably only useful to myself, unless you use Archlinux and similar programms as me, in which case you are welcome to have a look how I try to set mine up.Micro Editor Micro does not (yet) work with the termite terminal out of the box To change the TERM variable in the shell add to .bash_profile or whatever the equivalent in your shellexport TERM=xterm-256color  To have copy and paste working with all other X11 apps install xcliptrizen -S xclip  This is an optional dependency of micro but is really very useful.To enable the use of arrow keys in the Linux console (no GUI) follow these instructionsAtom editor  Comand palette remembers last word set absolutely fabulous East End syntax/ui theme remove RET from autocomplete-plus (set in settings menu) set ctrl-space for command pallete set alt-pageup/down to swith between left an right pane TODO: check keymap settings to  Termite To create an initial config in Archlinux copy the standard one into ~/.config/termitemkdir ~/.config/termite cp /etc/xdg/termite/config ~/.config/termite/config  Fonts Install Iosevka for terminaltrizen -S ttf-iosevka-term-ss04  The font name can then be found by listing all fonts fc-list and searching for elements of the name with grep. e.g.fc-list | grep iosevka  Pacman To use the most responsive archlinux mirror in your area update the archlinux mirror list - first fetchmirrors needs to be installed trizen -S fetchmirrors   Then run as root, in this case for UK  sudo fetchmirrors -c GB  Allow to update your mirror list  Useful commands for pacman These commands usually also work with a pacman helper like trizen. List explicitly installed packagessudo pacman -Qqe  that are not also a dependency for other packages.sudo pacman -Qent  List all foreign packages. That means from AUR or manually installed.pacman -Qn  List all installed files for a packagesudo pacman -Ql package_name  List all packages that have been installed as dependency to anouther packagesudo pacman -Qd  List all packages no longer required as dependencies (orphans):sudo pacman -Qdt   i3 To get rid of the title bar on top of every window add this (at the end) of the .~/.config/i3/config filenew_window pixel 1  This leafes you with a small (blue) frame arounf the active window. If you want is to be more visible change the number to 2 or 3. TO make the frame go away entirely use 0 or new window noneTo switch from one workspace to the next with the Win plus PageUp / PageDown keys add this in the config file.bindsym $mod+Next workspace next bindsym $mod+Prior workspace prev  nodejs and npm Install npm and nodejs withtrizen -S nodejs  In most of my attempts npm did not work well. Installing locally gave no result and installing globally failed with an error: &amp;gt; npm ERR! Error: EACCES: permission denied, access &amp;lsquo;/usr/lib/node_modulesSo this is the suggestion you can find in the npm manual. Make a directory for global installations:  mkdir ~/.npm-global  Configure npm to use the new directory path:  npm config set prefix &#39;~/.npm-global&#39;  Open or create a ~/.profile (or .bash_profile, or whatever it is on your system) file and add this line:  export PATH=~/.npm-global/bin:$PATH  Back on the command line, update your system variables: ``` source ~/.profile ```  System setup Install AUR helper trizenChose a directory to install trizen [this can be removed after the installation? ]git clone https://aur.archlinux.org/trizen.git cd trizen makepkg -si  Add user to group Check the assigned groups for a user with groupsTo add a user to a group use this patternusermod -a -G group username  Note: The change is only effective after the next login.Give user access to Virtualbox shared foldersudo usermod -a -G vboxsf mmw  ?? seems not to work &amp;hellip;Change (bash) shell to fish. This describes how to make fish your default shell. Fist install the fish shell.trizen -S fish  Find the documentation hereTo make fish your default shell you need to find out it&amp;rsquo;s path with whereis fish. Most likely it&amp;rsquo;s /usr/bin/fish.Once you have the path to fish use the command chsh (change shell) to make fish the default shell.chsh -s /usr/bin/fish  Instead of using setting varialbles (and this includes the $PATH) in .bashrc or .profile or so in fish you use the set command. So with set TERM xterm-256color you add a variable.spectrwm tiling window manager Install withtrizen -S spectrwm  For a first overview the man pages are usefull: man spectrwmFor more XDG integration you could install xdg-utils.First Configuration spectrwm looks in ~/.spectrwm first and then for /etc/spectrwm.conf So if you do not have config file in your home folder yet, copy it from /etccp /etc/spectrwm.conf ~/.spectrwm.conf  For Archlinux the standard bar_font paramenter needs to be updated as described in the WikiTo change keybindings you can copy one of the predefined keyboard mappings in folder /etc/spectrwmTo copy e.g. the us keyboard layout into your .config forlder type:mkdir ~/.config/spectrwm cp cp /etc/spectrwm/spectrwm_us.conf ~/.config/spectrwm/spectrwm_us.conf  To point spectrwm to your new keymapping file you need to update the .spectrwm.conf file.Update keyboard_mapping like this:# This allows you to include pre-defined key bindings for your keyboard layout. keyboard_mapping = ~/.config/spectrwm/.spectrwm_us.conf  Last but not least, change your .xinitrcexec spectrwm  Spectrwm keymap configuration I have found the following keybindings helpful:bind[focus_next]	= MOD+Right # Move to next programme on the same workspace bind[focus_prev]	= MOD+Left bind[term]	= MOD+Return # Start a terminal bind[ws_next]	= MOD+Next bind[ws_prev]	= MOD+Prior  If you use Linux in a Virtual machine on Windows like me then you will find that Win+l is permanently used by Windows to lock the screen. Even if you use VirtualBox. That means MOD+l to grow the master window will also trigger the screen lock. I just use the key next to l to grow the master window. In my case ;For Spectrwm you have to use xkb xharacter names. You can find the name of a character with the tool xev. The output is a bit messy and for ; looks like this: KeyPress event, serial 37, synthetic NO, window 0x1600001,root 0x2bd, subw 0x0, time 64418407, (590,691), root:(1265,692),state 0x0, keycode 47 (keysym 0x3b, semicolon), same_screen YES,XLookupString gives 1 bytes: (3b) &amp;ldquo;;&amp;rdquo;XmbLookupString gives 1 bytes: (3b) &amp;ldquo;;&amp;rdquo;XFilterEvent returns: False So the xkb keycode for ; is - tada semicolonSo to bind the master_grow command to MOD+; you have to add this line to the keymap file.bind[master_grow]	= MOD+semicolon # Make current window smaller.  Setup for screenshots To make the screenshot function work you have to - copy screenshot.sh from /usr/share/spectrwm to ~/local/bin (or any other place that is in your local PATH) - make sure the screenshot tool scrot is installed - change the config and if you want keymapping",
  "url": "https://absolute-beginner.netlify.com/post/sys-setup/"
},{
  "name": "Creating a man page from markdown with pandoc",
  "description": "How to create a man page from a README.md file",
  "body": "How to create a man page from a README.md fileCreate a (unix) man page with Markdown using pandoc Man pages are application documentation that you find for almost every Unix/BSD/.. system. The format is text based on a markup language called Nroff. The principle concept is similar to Markdown, however the markup language nroff is a quite a bit less readable than markdown. Often variations of the nroff format are used like groff.Man pages are usually used in a terminal. So if you want to see the documentation for the command ls (list files) then you can key in:man ls  and you will see the available options for ls. This works for almost every programme, provided the programme author has written a page.This tutorial describes how to create man documentation pages from a markdown file using pandocUsing pandoc Pandoc is a text conversion tool that can convert text from markdown (or GitHub flavoured markdown ) to groff, a format that is used by the man command to show documentation.Installation of pandoc As pandoc is often not installed as a standard tool you first have to install it on your system. Pandoc should be available from the package manager of your system.For Archlinux type:sudo pacman -S pandoc  Note: The above command installs quite a lot of dependencies on Archlinux. This is because it uses many shared files from Haskell (the programming language pandoc is build with). If you don&amp;rsquo;t have use for Haskell otherwise there is a pandoc version in the AUR called pandoc-bin that does not have these dependencies. You can install that package instead.Create a man page with pandoc To create a man page from markdown we need a markdown file first. Here is an example to start with:# Header 1 Text for this `man** page ## Header 2 **bold text** The last line  Save this file as test.mdTo convert this file into a man page format use this command in the folder where test.md is saved:pandoc --standalone --from gfm --to man test.md --output test.1  The result is in the file test.1 and you can look at the new formal with less test.1. This format is not how the man page will be shown. To see how your new file looks like as a man page, use:man -l test.1  Let&amp;rsquo;s have a quick look at the options of the pandoc command and what they do:&amp;mdash; standalone: creates a complete man page, with complete structure&amp;mdash; from: the format to convert from. In this example gfm (GitHub flavoured markdown) has been specified, but you can also write markdown. for the small differences see the Pandoc documentation&amp;mdash; to: this is the format we want to concert the text to. In this case a man page&amp;mdash; output: the name of the output file. You could also leave this out, then the output goes to stdout.Structure of a man page Now that we can convert markdown to man pages it is worth mentioning that man pages often follow a certain structure. This makes it easier to find information. Of course before you don&amp;rsquo;t publish a man page you can also follow your own structure.There are many header sections, that can be used. Only NAME is seen as mandatory.NAME - The name and a short description of the programme SYNOPSIS - A short summary how to use the programme. e.g.: pandoc [options] [input-file]... DESCRIPTION - Description of the programme OPTIONS - description of options RETURN VALUE - return values of programme once it terminates EXAMPLES - always good to give some examples NOTES - Additional info SEE ALSO - reference to other related programmes AUTHOR - as in author of the programme HISTORY - of the programme if that is helpfulIt is absolutely fine to use only some of these headers like for example: NAME, SYNOPSIS, OPTIONS or any other combination. Remember that NAME is expected.Useful links:  A good introduction into man pages  Creating a man page from a GitHub README.md If you have a README.md in for example GitHub that explains your programme reasonably well you could use that file to create your man page. All you have to do is to add the above headers in the decisive places and the convert the updated file into a man page.pandoc --standalone --from gfm --to man README.md --output prog.1  You might have already noticed the unusual naming convention to end the man page with .1. The number classifies your man page and .1 stands for general.",
  "url": "https://absolute-beginner.netlify.com/post/man-markdown/"
},{
  "name": "About",
  "description": "This site is written by a beginner.I have noted my experiences while I tied to discover this and that in the IT world. Basically I have taken notes while learning and then put it into a bit of form.It is a all a bit here and there. Still, I hope that it might be helpful for other beginners to see my experiences and to have a kick-start to see how some things work.",
  "body": "This site is written by a beginner.I have noted my experiences while I tied to discover this and that in the IT world. Basically I have taken notes while learning and then put it into a bit of form.It is a all a bit here and there. Still, I hope that it might be helpful for other beginners to see my experiences and to have a kick-start to see how some things work. Of course there sometimes might be much better ways to do things that I have not discovered yet, but it is a start.Have fun , Marcus.",
  "url": "https://absolute-beginner.netlify.com/about/"
},{
  "name": "An Archlinux Desktop with LXQt and KWin",
  "description": "Setting up LXQt with KWin in Virtualbox using Anarchy Linux",
  "body": "Setting up LXQt with KWin in Virtualbox using Anarchy Linux#KWin and LXQt and VirtualBoxThis guide describes how to set up KWin and LXQt in Virtualbox using Arch Anywhere.The basic setup should work with any Computer, Virtualbox is just what I use.I have tried to install a relative light version with only a small memory footprint. There might be a more elegant solution though. If someone has an idea, please let me know.Setup VirtualBox  2 cores 2 GB ram (If you can spare that, 1GB also works, I hav not tested with less) Chipset: ICH9 3D acceleration on ? bi-directional copy and paste Display mem 64MB Shared folder (this is nice to have, later I will show how to set up the share)  Run Arch Anywhere Start Arch Anywhere. I have chosen the following setup. Feel free to change. no Wifi: network comes from the host-pc of VirtualBox. no swap partition (a swap file can be set up later if required, I don&amp;rsquo;t have one) Accept virtualbox-guest-additions  Additional apps  VLC: I have chosen that for video  Install  choose LXQT as desktop environment Reboot  After the first boot  login as root Create a user in the terminal &amp;gt; useradd -m -G users,wheel,audio archuser &amp;gt; &amp;gt;passwd archuser Update the system &amp;gt; sudo pacman -Syu Install Kwin &amp;gt; sudo pacman -S kwin Instal Kwin system setting dialog This enanbles the Kwin setting dialog. You can access the setting by clicking in the upper left menu of a window. There you see more actions and in that menu you see &amp;gt; sudo pacman -S kde-cli-tools Kwin-Gtk compability To change the theme of GTK apps in LXQt you need the LXDE appearance app. It has almost no dependencies, so it does not add much. &amp;gt; sudo pacman -S lxappearance In the lxappearance app you can chose the theme the gtk apps use. To see gtk apps with the Kwin Breeze themes add &amp;gt; sudo pacman -S breeze-gtk Fine tuning In my installation I had trouble with changing apps using Alt-Tab. Looking into the logs it turned out an app called kglobalaccel5 was not running. I have no idea where this app should be started but adding it to the LXQt autostart did it for me. &amp;gt; add to LXQt autostart: Menu -&amp;gt; Preferences -&amp;gt; LXQT settings -&amp;gt; Session Settings &amp;gt; In tab Autostart add kglobalaccel5 to LXQT Autostart  ( If you still have trouble check the Kwin settings in tab Task switcher. The flag current activity has to be set to on )Install additional software This is a selection of mostly Qt software that I found usefull.Browser I have chosen Qupzilla. Serves me well and is relativlely light. &amp;gt; sudo pacman -S qupzillaALternative: &amp;gt; sudo pacman -S firefox###AUR repository To use packages from the AUR repository it is very helpful to use a package managemr for AUR. Pacman does not cover AUR packages. There are many options but I like trizen the best. It works like pacman with some additional functions for AUR packages.git clone https://aur.archlinux.org/trizen.git cd trizen makepkg -si  You can basically replace your use of pacman with trizen. Only for some special cases you can still use pacman.Graphical Editor: howl Install howl ( gui editor) from AUR repository &amp;gt; trizen -S howlYou don&amp;rsquo;t need to use sudo for trizen, you will be asked for the sudo passwd laterImage viewer: LX-Image Install lximage package from AUR repository &amp;gt; trizen -S lximage-qtPDF viewer: qPDFview  trizen -S qpdfview Disk space checker: QDirStat  trizen -S qdirstat Terminal: LX Terminal Many LXQt editions use Qterminal. I like it but some keys are not accessible from programms in the console. So I use LX Termianl which has hardly any dependencies and is a bit smoother in my view. sudo pacman -S lxterminal Console Editor Micro Install Micro from the AUR repository: trizen -S micro-bin Alternative: Console Editor: Tilde Install Tilde (console editor) from AUR repository Tilde is a very user friendly console text editor that uses mostly the same keybindings as graphical apps like Ctrl-C for copy, Ctrl-V for paste and so on and comes with the menu (Alt-f for the file-menu for example)This package requires the packages fakeroot and pkg_config. Install these packages before you install tilde trizen -S tilde When you install Tilde several libraries will be installed during the process as dependencies. Most called ligt3*, etc.Download the arch-anywhere tool fetchmirrors  trizen -S fetchmirrors Use this tool to set up the right mirror servers for the Arch repositoryfetchmirrors --help for helptrizen PGP Tip If you face a PGP authentication issue using trizen check this:Error message during trizen build is: ERROR: One or more PGP signatures could not be verified! :If you trust the package copy the public KEYID from the error message Then use these commands in the console to add the new key: gpg &amp;ndash;recv-key KEYID gpg &amp;ndash;lsign KEYID For details how that works read:Helpful hints, comments and questions are welcome",
  "url": "https://absolute-beginner.netlify.com/post/lxqt-kwin-virtualbox/"
}
]
